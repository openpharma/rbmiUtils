[{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://openpharma.github.io/rbmiUtils/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"vignette demonstrates : Perform multiple imputation using rbmi package. Store modify imputed data using rbmiUtils. Analyze imputed data using: standard ANCOVA continuous endpoint (CHG) binary responder analysis CRIT1FLN using beeca pattern enables reproducible workflows imputation analysis can separated revisited independently.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"statistical-context","dir":"Articles","previous_headings":"","what":"Statistical Context","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"approach applies Rubin’s Rules inference multiple imputation: fit model imputed dataset, dervive response variable CHG score, extract marginal effects statistics interest, combine results single inference using Rubin’s combining rules.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"step-1-setup-and-data-preparation","dir":"Articles","previous_headings":"","what":"Step 1: Setup and Data Preparation","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"","code":"library(dplyr) library(tidyr) library(readr) library(purrr) library(rbmi) library(beeca) library(rbmiUtils) set.seed(1974) data(\"ADEFF\")  ADEFF <- ADEFF %>%   mutate(     TRT = factor(TRT01P, levels = c(\"Placebo\", \"Drug A\")),     USUBJID = factor(USUBJID),     AVISIT = factor(AVISIT)   )"},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"step-2-define-imputation-model","dir":"Articles","previous_headings":"","what":"Step 2: Define Imputation Model","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"","code":"vars <- set_vars(   subjid = \"USUBJID\",   visit = \"AVISIT\",   group = \"TRT\",   outcome = \"CHG\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\") ) method <- method_bayes(   n_samples = 100,   control = control_bayes(warmup = 200, thin = 2) ) dat <- ADEFF %>%   select(USUBJID, STRATA, REGION, REGIONC, TRT, BASE, CHG, AVISIT)  draws_obj <- draws(data = dat, vars = vars, method = method) #> recompiling to avoid crashing R session #> Trying to compile a simple C file #> Running /opt/R/4.5.0/lib/R/bin/R CMD SHLIB foo.c #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> gcc -std=gnu2x -I\"/opt/R/4.5.0/lib/R/include\" -DNDEBUG   -I\"/home/runner/work/_temp/Library/Rcpp/include/\"  -I\"/home/runner/work/_temp/Library/RcppEigen/include/\"  -I\"/home/runner/work/_temp/Library/RcppEigen/include/unsupported\"  -I\"/home/runner/work/_temp/Library/BH/include\" -I\"/home/runner/work/_temp/Library/StanHeaders/include/src/\"  -I\"/home/runner/work/_temp/Library/StanHeaders/include/\"  -I\"/home/runner/work/_temp/Library/RcppParallel/include/\"  -I\"/home/runner/work/_temp/Library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/runner/work/_temp/Library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/usr/local/include    -fpic  -g -O2  -c foo.c -o foo.o #> In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:19, #>                  from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1, #>                  from /home/runner/work/_temp/Library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp:22, #>                  from <command-line>: #> /home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/Macros.h:679:10: fatal error: cmath: No such file or directory #>   679 | #include <cmath> #>       |          ^~~~~~~ #> compilation terminated. #> make: *** [/opt/R/4.5.0/lib/R/etc/Makeconf:202: foo.o] Error 1 #>  #> SAMPLING FOR MODEL 'rbmi_mmrm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000482 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 4.82 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:   1 / 400 [  0%]  (Warmup) #> Chain 1: Iteration:  40 / 400 [ 10%]  (Warmup) #> Chain 1: Iteration:  80 / 400 [ 20%]  (Warmup) #> Chain 1: Iteration: 120 / 400 [ 30%]  (Warmup) #> Chain 1: Iteration: 160 / 400 [ 40%]  (Warmup) #> Chain 1: Iteration: 200 / 400 [ 50%]  (Warmup) #> Chain 1: Iteration: 201 / 400 [ 50%]  (Sampling) #> Chain 1: Iteration: 240 / 400 [ 60%]  (Sampling) #> Chain 1: Iteration: 280 / 400 [ 70%]  (Sampling) #> Chain 1: Iteration: 320 / 400 [ 80%]  (Sampling) #> Chain 1: Iteration: 360 / 400 [ 90%]  (Sampling) #> Chain 1: Iteration: 400 / 400 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.684 seconds (Warm-up) #> Chain 1:                0.523 seconds (Sampling) #> Chain 1:                1.207 seconds (Total) #> Chain 1: #> Warning in fit_mcmc(designmat = model_df_scaled[, -1, drop = FALSE], outcome = model_df_scaled[, : The largest R-hat is 1.07, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat  impute_obj <- impute(draws_obj, references = c(\"Placebo\" = \"Placebo\", \"Drug A\" = \"Placebo\"))  ADMI <- get_imputed_data(impute_obj)"},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"step-3-add-responder-variables","dir":"Articles","previous_headings":"","what":"Step 3: Add Responder Variables","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"","code":"ADMI <- ADMI %>%   mutate(     CRIT1FLN = ifelse(CHG > 3, 1, 0),     CRIT1FL = ifelse(CRIT1FLN == 1, \"Y\", \"N\"),     CRIT = \"CHG > 3\"   )"},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"step-4-continuous-endpoint-analysis-chg","dir":"Articles","previous_headings":"","what":"Step 4: Continuous Endpoint Analysis (CHG)","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"","code":"ana_obj_ancova <- analyse_mi_data(   data = ADMI,   vars = vars,   method = method,   fun = ancova ) pool_obj_ancova <- pool(ana_obj_ancova) print(pool_obj_ancova) #>  #> Pool Object #> ----------- #> Number of Results Combined: 100 #> Method: rubin #> Confidence Level: 0.95 #> Alternative: two.sided #>  #> Results: #>  #>   ======================================================== #>       parameter      est     se     lci     uci     pval   #>   -------------------------------------------------------- #>      trt_Week 24    -2.176  0.182  -2.533  -1.818  <0.001  #>    lsm_ref_Week 24  0.076   0.131  -0.181  0.333    0.56   #>    lsm_alt_Week 24  -2.099  0.125  -2.346  -1.853  <0.001  #>      trt_Week 48    -3.806  0.256  -4.309  -3.304  <0.001  #>    lsm_ref_Week 48  0.044   0.185  -0.32   0.407   0.814   #>    lsm_alt_Week 48  -3.763  0.175  -4.107  -3.418  <0.001  #>   -------------------------------------------------------- tidy_pool_obj(pool_obj_ancova) #> # A tibble: 6 × 10 #>   parameter       description visit parameter_type lsm_type     est    se    lci #>   <chr>           <chr>       <chr> <chr>          <chr>      <dbl> <dbl>  <dbl> #> 1 trt_Week 24     Treatment … Week… trt            NA       -2.18   0.182 -2.53  #> 2 lsm_ref_Week 24 Least Squa… Week… lsm            ref       0.0763 0.131 -0.181 #> 3 lsm_alt_Week 24 Least Squa… Week… lsm            alt      -2.10   0.125 -2.35  #> 4 trt_Week 48     Treatment … Week… trt            NA       -3.81   0.256 -4.31  #> 5 lsm_ref_Week 48 Least Squa… Week… lsm            ref       0.0436 0.185 -0.320 #> 6 lsm_alt_Week 48 Least Squa… Week… lsm            alt      -3.76   0.175 -4.11  #> # ℹ 2 more variables: uci <dbl>, pval <dbl>"},{"path":[]},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"define-analysis-function","dir":"Articles","previous_headings":"Step 5: Responder Endpoint Analysis (CRIT1FLN)","what":"Define Analysis Function","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"","code":"gcomp_responder <- function(data, ...) {   model <- glm(CRIT1FLN ~ TRT + BASE + STRATA + REGION, data = data, family = binomial)    marginal_fit <- get_marginal_effect(     model,     trt = \"TRT\",     method = \"Ge\",     type = \"HC0\",     contrast = \"diff\",     reference = \"Placebo\"   )    res <- marginal_fit$marginal_results   list(     trt = list(       est = res[res$STAT == \"diff\", \"STATVAL\"][[1]],       se = res[res$STAT == \"diff_se\", \"STATVAL\"][[1]],       df = NA     )   ) }"},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"define-variables-and-run-analysis","dir":"Articles","previous_headings":"Step 5: Responder Endpoint Analysis (CRIT1FLN)","what":"Define Variables and Run Analysis","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"","code":"vars_binary <- set_vars(   subjid = \"USUBJID\",   visit = \"AVISIT\",   group = \"TRT\",   outcome = \"CRIT1FLN\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\") ) ana_obj_prop <- analyse_mi_data(   data = ADMI,   vars = vars_binary,   method = method,   fun = gcomp_responder ) pool_obj_prop <- pool(ana_obj_prop) print(pool_obj_prop) #>  #> Pool Object #> ----------- #> Number of Results Combined: 100 #> Method: rubin #> Confidence Level: 0.95 #> Alternative: two.sided #>  #> Results: #>  #>   ================================================== #>    parameter   est     se     lci     uci     pval   #>   -------------------------------------------------- #>       trt     -0.063  0.012  -0.087  -0.039  <0.001  #>   --------------------------------------------------"},{"path":"https://openpharma.github.io/rbmiUtils/articles/analyse2.html","id":"final-notes","dir":"Articles","previous_headings":"","what":"Final Notes","title":"Storing and Analyzing Imputed Data with rbmiUtils","text":"ADMI object can saved later reuse. Analyses can modularly applied using custom functions. tidy output tidy_pool_obj() helpful reporting review.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Baillie. Author, maintainer, copyright holder. Tobias Mütze. Author. Jack Talboys. Author. Lukas . Widmer. Contributor.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baillie M, Mütze T, Talboys J (2025). rbmiUtils: Utility Functions Support Extend 'rbmi' Package. R package version 0.1.4.9000, https://github.com/openpharma/rbmiUtils.","code":"@Manual{,   title = {rbmiUtils: Utility Functions to Support and Extend the 'rbmi' Package},   author = {Mark Baillie and Tobias Mütze and Jack Talboys},   year = {2025},   note = {R package version 0.1.4.9000},   url = {https://github.com/openpharma/rbmiUtils}, }"},{"path":"https://openpharma.github.io/rbmiUtils/index.html","id":"rbmiutils---","dir":"","previous_headings":"","what":"Utility Functions to Support and Extend the rbmi Package","title":"Utility Functions to Support and Extend the rbmi Package","text":"rbmiUtils extends functionality rbmi support streamlined workflows multiple imputation clinical trials. designed simplify key tasks analysis execution, pooling, result tidying, imputed data handling.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Utility Functions to Support and Extend the rbmi Package","text":"Installation Example Dataset Utilities Development Status","code":""},{"path":"https://openpharma.github.io/rbmiUtils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility Functions to Support and Extend the rbmi Package","text":"can install development version rbmiUtils cran GitHub:","code":""},{"path":"https://openpharma.github.io/rbmiUtils/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Utility Functions to Support and Extend the rbmi Package","text":"example shows run covariate-adjusted ANCOVA imputed datasets using Bayesian multiple imputation:","code":"library(dplyr) library(rbmi) library(rbmiUtils)  data(\"ADMI\")  # Setup N_IMPUTATIONS <- 100 WARMUP <- 200 THIN <- 5  # Preprocessing ADMI <- ADMI %>%   mutate(     TRT = factor(TRT, levels = c(\"Placebo\", \"Drug A\")),     USUBJID = factor(USUBJID),     AVISIT = factor(AVISIT)   )  # Define analysis variables vars <- set_vars(   subjid = \"USUBJID\",   visit = \"AVISIT\",   group = \"TRT\",   outcome = \"CHG\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\") )  # Specify imputation method method <- rbmi::method_bayes(   n_samples = N_IMPUTATIONS,   control = rbmi::control_bayes(     warmup = WARMUP,     thin = THIN   ) )  # Run analysis ana_obj <- analyse_mi_data(   data = ADMI,   vars = vars,   method = method,   fun = ancova )  # Pool results and tidy pool_obj <- pool(ana_obj) tidy_df <- tidy_pool_obj(pool_obj)  # View results print(tidy_df) #> # A tibble: 6 × 10 #>   parameter       description visit parameter_type lsm_type     est    se    lci #>   <chr>           <chr>       <chr> <chr>          <chr>      <dbl> <dbl>  <dbl> #> 1 trt_Week 24     Treatment … Week… trt            <NA>     -2.17   0.182 -2.53  #> 2 lsm_ref_Week 24 Least Squa… Week… lsm            ref       0.0782 0.131 -0.179 #> 3 lsm_alt_Week 24 Least Squa… Week… lsm            alt      -2.09   0.126 -2.34  #> 4 trt_Week 48     Treatment … Week… trt            <NA>     -3.81   0.256 -4.31  #> 5 lsm_ref_Week 48 Least Squa… Week… lsm            ref       0.0481 0.185 -0.316 #> 6 lsm_alt_Week 48 Least Squa… Week… lsm            alt      -3.76   0.176 -4.11  #> # ℹ 2 more variables: uci <dbl>, pval <dbl>"},{"path":"https://openpharma.github.io/rbmiUtils/index.html","id":"datasets","dir":"","previous_headings":"","what":"Datasets","title":"Utility Functions to Support and Extend the rbmi Package","text":"package includes two example datasets demonstrating imputation analysis: ADEFF: example efficacy dataset missing data. ADMI: large multiple imputation dataset 100,000 rows multiple visits, treatment arms, stratification variables. Use ?ADEFF ?ADMI view full dataset documentation.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/index.html","id":"utilities","dir":"","previous_headings":"","what":"Utilities","title":"Utility Functions to Support and Extend the rbmi Package","text":"Key exported functions include: analyse_mi_data(): Applies analysis function (e.g., ANCOVA) imputed datasets. tidy_pool_obj(): Tidies annotates pooled results reporting. get_imputed_data(): Extracts long-format imputed datasets original subject IDs mapped. utilities wrap standard rbmi workflows improved reproducibility interpretability.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/index.html","id":"development-status","dir":"","previous_headings":"","what":"Development Status","title":"Utility Functions to Support and Extend the rbmi Package","text":"package experimental active development. Feedback contributions welcome via GitHub issues pull requests.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/ADEFF.html","id":null,"dir":"Reference","previous_headings":"","what":"Example efficacy trial dataset — ADEFF","title":"Example efficacy trial dataset — ADEFF","text":"simplified example simulated trial dataset, missing data.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/ADEFF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example efficacy trial dataset — ADEFF","text":"","code":"ADEFF"},{"path":"https://openpharma.github.io/rbmiUtils/reference/ADEFF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example efficacy trial dataset — ADEFF","text":"ADEFF data frame 1,000 rows 10 columns: USUBJID Unique subject identifier AVAL Primary outcome variable TRT01P Planned treatment STRATA Stratification randomisation REGION Stratification region REGIONC Stratification region, numeric code BASE Baseline value primary outcome variable CHG Change baseline AVISIT Visit number PARAM Analysis parameter name","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/ADMI.html","id":null,"dir":"Reference","previous_headings":"","what":"Example multiple imputation trial dataset — ADMI","title":"Example multiple imputation trial dataset — ADMI","text":"simplified example simulated trial ADMI dataset","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/ADMI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example multiple imputation trial dataset — ADMI","text":"","code":"ADMI"},{"path":"https://openpharma.github.io/rbmiUtils/reference/ADMI.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example multiple imputation trial dataset — ADMI","text":"ADMI data frame 100,000 rows 12 columns: USUBJID Unique patient identifier STRATA Stratification randomisation REGION Stratification region REGIONC Stratification region, numeric code TRT Planned treatment BASE Baseline value primary outcome variable CHG Change baseline AVISIT Visit number IMPID Imputation number identifier CRIT1FLN Responder criteria (binary) CRIT1FL Responder criteria (categorical) CRIT Responder criteria (definition)","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/analyse_mi_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Analysis Function to Multiple Imputed Datasets — analyse_mi_data","title":"Apply Analysis Function to Multiple Imputed Datasets — analyse_mi_data","text":"function applies analysis function (e.g., ANCOVA) imputed datasets stores results later pooling. designed work multiple imputed datasets apply given analysis function imputation iteration.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/analyse_mi_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Analysis Function to Multiple Imputed Datasets — analyse_mi_data","text":"","code":"analyse_mi_data(   data = NULL,   vars = NULL,   method = NULL,   fun = rbmi::ancova,   delta = NULL,   ... )"},{"path":"https://openpharma.github.io/rbmiUtils/reference/analyse_mi_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Analysis Function to Multiple Imputed Datasets — analyse_mi_data","text":"data data frame containing imputed datasets. data frame include variable (e.g., IMPID) identifies distinct imputation iterations. vars list specifying key variables used analysis (e.g., subjid, visit, group, outcome). Required. method character string object specifying method used analysis (e.g., Bayesian imputation). Defaults NULL. fun function applied imputed dataset. Defaults rbmi::ancova. Must valid analysis function. delta data.frame used delta adjustments, NULL delta adjustments needed. Defaults NULL. ... Additional arguments passed analysis function fun.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/analyse_mi_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Analysis Function to Multiple Imputed Datasets — analyse_mi_data","text":"object class analysis containing results applying analysis function imputed dataset.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/analyse_mi_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Analysis Function to Multiple Imputed Datasets — analyse_mi_data","text":"function loops distinct imputation datasets (identified IMPID), applies provided analysis function fun, stores results later pooling. delta dataset provided, merged imputed data apply specified delta adjustment analysis.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/analyse_mi_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Analysis Function to Multiple Imputed Datasets — analyse_mi_data","text":"","code":"# Example usage with an ANCOVA function library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(rbmi) library(rbmiUtils) set.seed(123) data(\"ADMI\")  # Convert key columns to factors ADMI$TRT <- factor(ADMI$TRT, levels = c(\"Placebo\", \"Drug A\")) ADMI$USUBJID <- factor(ADMI$USUBJID) ADMI$AVISIT <- factor(ADMI$AVISIT)  # Define key variables for ANCOVA analysis  vars <- set_vars(   subjid = \"USUBJID\",   visit = \"AVISIT\",   group = \"TRT\",   outcome = \"CHG\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\")  # Covariates for adjustment  )  # Specify the imputation method (Bayesian) - need for pool step  method <- rbmi::method_bayes(  n_samples = 20,  control = rbmi::control_bayes(    warmup = 20,    thin = 1    )  )  # Perform ANCOVA Analysis on Each Imputed Dataset ana_obj_ancova <- analyse_mi_data(   data = ADMI,   vars = vars,   method = method,   fun = ancova,  # Apply ANCOVA   delta = NULL   # No sensitivity analysis adjustment )"},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_analysis2.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an rbmi analysis object — as_analysis2","title":"Construct an rbmi analysis object — as_analysis2","text":"helper function create analysis object stores results multiple imputation analyses. validates results ensures proper class assignment. modification rbmi::as_analysis function.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_analysis2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an rbmi analysis object — as_analysis2","text":"","code":"as_analysis2(results, method, delta = NULL, fun = NULL, fun_name = NULL)"},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_analysis2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an rbmi analysis object — as_analysis2","text":"results list containing analysis results imputation. method method object used imputation. delta Optional. delta dataset used adjustment. fun analysis function used. fun_name name analysis function (used printing).","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_analysis2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an rbmi analysis object — as_analysis2","text":"object class analysis results associated metadata.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_simple_formula2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character variable list to formula — as_simple_formula2","title":"Convert character variable list to formula — as_simple_formula2","text":"Convert character variable list formula","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_simple_formula2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character variable list to formula — as_simple_formula2","text":"","code":"as_simple_formula2(outcome, covars)"},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_simple_formula2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character variable list to formula — as_simple_formula2","text":"outcome Character string, outcome variable. covars Character vector covariates.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/as_simple_formula2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert character variable list to formula — as_simple_formula2","text":"formula object.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/extract_covariates2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variable names from model terms — extract_covariates2","title":"Extract variable names from model terms — extract_covariates2","text":"Takes character vector including potentially model terms like * : extracts individual variables.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/extract_covariates2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variable names from model terms — extract_covariates2","text":"","code":"extract_covariates2(x)"},{"path":"https://openpharma.github.io/rbmiUtils/reference/extract_covariates2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variable names from model terms — extract_covariates2","text":"x character vector model terms.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/extract_covariates2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variable names from model terms — extract_covariates2","text":"character vector unique variable names.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function for Generalized G-computation for Binary Outcomes — gcomp_binary","title":"Utility function for Generalized G-computation for Binary Outcomes — gcomp_binary","text":"Wrapper function targeting marginal treatment effect using g-computation using beeca package. Intended binary endpoints.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function for Generalized G-computation for Binary Outcomes — gcomp_binary","text":"","code":"gcomp_binary(   data,   outcome = \"CRIT1FLN\",   treatment = \"TRT\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\"),   reference = \"Placebo\",   contrast = \"diff\",   method = \"Ge\",   type = \"HC0\",   ... )"},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function for Generalized G-computation for Binary Outcomes — gcomp_binary","text":"data data.frame containing analysis dataset. outcome Name binary outcome variable (string). treatment Name treatment variable (string). covariates Character vector covariate names adjust . reference Reference level treatment variable (default: \"Placebo\"). contrast Type contrast compute (default: \"diff\"). method Marginal estimation method variance (default: \"Ge\"). type Variance estimator type (default: \"HC0\"). ... Additional arguments passed beeca::get_marginal_effect().","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function for Generalized G-computation for Binary Outcomes — gcomp_binary","text":"named list treatment effect estimate, standard error, degrees freedom (applicable).","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function for Generalized G-computation for Binary Outcomes — gcomp_binary","text":"","code":"# Load required packages library(rbmiUtils) library(beeca)      # for get_marginal_effect() library(dplyr) # Load example data data(\"ADMI\") # Ensure correct factor levels ADMI <- ADMI %>%   mutate(     TRT = factor(TRT, levels = c(\"Placebo\", \"Drug A\")),     STRATA = factor(STRATA),     REGION = factor(REGION)   ) # Apply g-computation for binary responder result <- gcomp_binary(   data = ADMI,   outcome = \"CRIT1FLN\",   treatment = \"TRT\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\"),   reference = \"Placebo\",   contrast = \"diff\",   method = \"Ge\",    # from beeca: GEE robust sandwich estimator   type = \"HC0\"      # from beeca: heteroskedasticity-consistent SE )  # Print results print(result) #> $trt #> $trt$est #> [1] -0.0632916 #>  #> $trt$se #> [1] 0.001189759 #>  #> $trt$df #> [1] NA #>  #>"},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder.html","id":null,"dir":"Reference","previous_headings":"","what":"G-computation Analysis for a Single Visit — gcomp_responder","title":"G-computation Analysis for a Single Visit — gcomp_responder","text":"Performs logistic regression estimates marginal effects binary outcomes.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"G-computation Analysis for a Single Visit — gcomp_responder","text":"","code":"gcomp_responder(   data,   vars,   reference_levels = NULL,   var_method = \"Ge\",   type = \"HC0\",   contrast = \"diff\" )"},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"G-computation Analysis for a Single Visit — gcomp_responder","text":"data data.frame one visit data. vars list containing group, outcome, covariates, visit. reference_levels Optional vector specifying reference level(s) treatment factor. var_method Marginal variance estimation method (default: \"Ge\"). type Type robust variance estimator (default: \"HC0\"). contrast Type contrast compute (default: \"diff\").","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"G-computation Analysis for a Single Visit — gcomp_responder","text":"named list containing estimates standard errors treatment comparisons within-arm means.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"G-computation for a Binary Outcome at Multiple Visits — gcomp_responder_multi","title":"G-computation for a Binary Outcome at Multiple Visits — gcomp_responder_multi","text":"Applies gcomp_responder() separately unique visit data.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"G-computation for a Binary Outcome at Multiple Visits — gcomp_responder_multi","text":"","code":"gcomp_responder_multi(data, vars, reference_levels = NULL, ...)"},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"G-computation for a Binary Outcome at Multiple Visits — gcomp_responder_multi","text":"data data.frame containing multiple visits. vars list specifying analysis variables. reference_levels Optional reference level treatment variable. ... Additional arguments passed gcomp_responder().","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"G-computation for a Binary Outcome at Multiple Visits — gcomp_responder_multi","text":"named list estimates visit treatment group.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/gcomp_responder_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"G-computation for a Binary Outcome at Multiple Visits — gcomp_responder_multi","text":"","code":"# \\donttest{ library(dplyr) library(rbmi) library(rbmiUtils)  data(\"ADMI\")  ADMI <- ADMI |>   mutate(     TRT = factor(TRT, levels = c(\"Placebo\", \"Drug A\")),     STRATA = factor(STRATA),     REGION = factor(REGION)   )  # Note: method must match the original used for imputation method <- method_bayes(   n_samples = 100,   control = control_bayes(warmup = 20, thin = 2) )  vars_binary <- set_vars(   subjid = \"USUBJID\",   visit = \"AVISIT\",   group = \"TRT\",   outcome = \"CRIT1FLN\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\") )  ana_obj_prop <- analyse_mi_data(   data = ADMI,   vars = vars_binary,   method = method,   fun = gcomp_responder_multi,   reference_levels = \"Placebo\",   contrast = \"diff\",   var_method = \"Ge\",   type = \"HC0\" )  pool(ana_obj_prop) #>  #> Pool Object #> ----------- #> Number of Results Combined: 100 #> Method: rubin #> Confidence Level: 0.95 #> Alternative: two.sided #>  #> Results: #>  #>   =================================================================== #>            parameter            est     se     lci     uci     pval   #>   ------------------------------------------------------------------- #>    trt_Drug A-Placebo_Week 24  -0.031  0.012  -0.053  -0.008  0.007   #>        lsm_Drug A_Week 24        0     0.001  -0.001  0.002   0.921   #>       lsm_Placebo_Week 24      0.031   0.011  0.008   0.053   0.007   #>    trt_Drug A-Placebo_Week 48  -0.096  0.021  -0.137  -0.054  <0.001  #>        lsm_Drug A_Week 48      0.007   0.005  -0.003  0.017    0.15   #>       lsm_Placebo_Week 48      0.103   0.021  0.063   0.143   <0.001  #>   ------------------------------------------------------------------- #>  # }"},{"path":"https://openpharma.github.io/rbmiUtils/reference/get_imputed_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Imputed Data Sets as a data frame — get_imputed_data","title":"Get Imputed Data Sets as a data frame — get_imputed_data","text":"function takes imputed dataset mapping variable return dataset original IDs mapped back renamed appropriately.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/get_imputed_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Imputed Data Sets as a data frame — get_imputed_data","text":"","code":"get_imputed_data(impute_obj)"},{"path":"https://openpharma.github.io/rbmiUtils/reference/get_imputed_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Imputed Data Sets as a data frame — get_imputed_data","text":"impute_obj imputation object imputed datasets extracted.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/get_imputed_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Imputed Data Sets as a data frame — get_imputed_data","text":"data frame original subject IDs mapped renamed.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/get_imputed_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Imputed Data Sets as a data frame — get_imputed_data","text":"","code":"# \\donttest{ library(dplyr) library(rbmi) library(rbmiUtils)  set.seed(1974) # Load example dataset data(\"ADEFF\")  # Prepare data ADEFF <- ADEFF |>   mutate(     TRT = factor(TRT01P, levels = c(\"Placebo\", \"Drug A\")),     USUBJID = factor(USUBJID),     AVISIT = factor(AVISIT)   )  # Define variables for imputation vars <- set_vars(   subjid = \"USUBJID\",   visit = \"AVISIT\",   group = \"TRT\",   outcome = \"CHG\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\") )  # Define Bayesian imputation method method <- method_bayes(   n_samples = 100,   control = control_bayes(warmup = 200, thin = 2) )  # Generate draws and perform imputation draws_obj <- draws(data = ADEFF, vars = vars, method = method) #>  #> SAMPLING FOR MODEL 'rbmi_mmrm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000434 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 4.34 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:   1 / 400 [  0%]  (Warmup) #> Chain 1: Iteration:  40 / 400 [ 10%]  (Warmup) #> Chain 1: Iteration:  80 / 400 [ 20%]  (Warmup) #> Chain 1: Iteration: 120 / 400 [ 30%]  (Warmup) #> Chain 1: Iteration: 160 / 400 [ 40%]  (Warmup) #> Chain 1: Iteration: 200 / 400 [ 50%]  (Warmup) #> Chain 1: Iteration: 201 / 400 [ 50%]  (Sampling) #> Chain 1: Iteration: 240 / 400 [ 60%]  (Sampling) #> Chain 1: Iteration: 280 / 400 [ 70%]  (Sampling) #> Chain 1: Iteration: 320 / 400 [ 80%]  (Sampling) #> Chain 1: Iteration: 360 / 400 [ 90%]  (Sampling) #> Chain 1: Iteration: 400 / 400 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.678 seconds (Warm-up) #> Chain 1:                0.52 seconds (Sampling) #> Chain 1:                1.198 seconds (Total) #> Chain 1:  #> Warning: The largest R-hat is 1.07, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat impute_obj <- impute(draws_obj,   references = c(\"Placebo\" = \"Placebo\", \"Drug A\" = \"Placebo\"))  # Extract imputed data with original subject IDs admi <- get_imputed_data(impute_obj) head(admi) #>   IMPID internal_id STRATA        REGION REGIONC TRT01P BASE  AVISIT AVAL #> 1     1    new_pt_1      A North America       1 Drug A   16 Week 24   12 #> 2     1    new_pt_1      A North America       1 Drug A   16 Week 48   13 #> 3     1    new_pt_2      A          Asia       4 Drug A   10 Week 24    7 #> 4     1    new_pt_2      A          Asia       4 Drug A   10 Week 48    5 #> 5     1    new_pt_3      A South America       2 Drug A   12 Week 24    9 #> 6     1    new_pt_3      A South America       2 Drug A   12 Week 48   10 #>          PARAM CHG    TRT USUBJID #> 1 ESSDAI score  -4 Drug A   ID001 #> 2 ESSDAI score  -3 Drug A   ID001 #> 3 ESSDAI score  -3 Drug A   ID002 #> 4 ESSDAI score  -5 Drug A   ID002 #> 5 ESSDAI score  -3 Drug A   ID003 #> 6 ESSDAI score  -2 Drug A   ID003 # }"},{"path":"https://openpharma.github.io/rbmiUtils/reference/rbmiUtils-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rbmiUtils: Utility Functions to Support and Extend the 'rbmi' Package — rbmiUtils-package","title":"rbmiUtils: Utility Functions to Support and Extend the 'rbmi' Package — rbmiUtils-package","text":"Provides utility functions extend capabilities reference-based multiple imputation package 'rbmi'. supports clinical trial analysis workflows functions managing imputed datasets, applying analysis methods across imputations, tidying results reporting.","code":""},{"path":[]},{"path":"https://openpharma.github.io/rbmiUtils/reference/rbmiUtils-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rbmiUtils: Utility Functions to Support and Extend the 'rbmi' Package — rbmiUtils-package","text":"Maintainer: Mark Baillie bailliem@gmail.com (ORCID) [copyright holder] Authors: Tobias Mütze tobias.muetze@novartis.com (ORCID) Jack Talboys jack.talboys@novartis.com contributors: Lukas . Widmer (ORCID) [contributor]","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/tidy_pool_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy and Annotate a Pooled Object for Publication — tidy_pool_obj","title":"Tidy and Annotate a Pooled Object for Publication — tidy_pool_obj","text":"function processes pooled analysis object class pool tidy tibble format. adds contextual information, whether parameter treatment comparison least squares mean, dynamically identifies visit names parameter column, provides additional columns parameter type, least squares mean type, visit.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/tidy_pool_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy and Annotate a Pooled Object for Publication — tidy_pool_obj","text":"","code":"tidy_pool_obj(pool_obj)"},{"path":"https://openpharma.github.io/rbmiUtils/reference/tidy_pool_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy and Annotate a Pooled Object for Publication — tidy_pool_obj","text":"pool_obj pooled analysis object class pool.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/tidy_pool_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy and Annotate a Pooled Object for Publication — tidy_pool_obj","text":"tibble containing processed pooled analysis results. tibble includes columns parameter, description, estimates, standard errors, confidence intervals, p-values, visit, parameter type, least squares mean type.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/tidy_pool_obj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidy and Annotate a Pooled Object for Publication — tidy_pool_obj","text":"function rounds numeric columns three decimal places presentation. dynamically processes parameter column separating components (e.g., type estimate, reference vs. alternative arm, visit), provides informative descriptions output.","code":""},{"path":"https://openpharma.github.io/rbmiUtils/reference/tidy_pool_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy and Annotate a Pooled Object for Publication — tidy_pool_obj","text":"","code":"# Example usage: library(dplyr) library(rbmi)  data(\"ADMI\") N_IMPUTATIONS <- 100 BURN_IN <- 200 BURN_BETWEEN <- 5  # Convert key columns to factors ADMI$TRT <- factor(ADMI$TRT, levels = c(\"Placebo\", \"Drug A\")) ADMI$USUBJID <- factor(ADMI$USUBJID) ADMI$AVISIT <- factor(ADMI$AVISIT)  # Define key variables for ANCOVA analysis  vars <- set_vars(   subjid = \"USUBJID\",   visit = \"AVISIT\",   group = \"TRT\",   outcome = \"CHG\",   covariates = c(\"BASE\", \"STRATA\", \"REGION\")  # Covariates for adjustment  )  # Specify the imputation method (Bayesian) - need for pool step method <- rbmi::method_bayes(   n_samples = N_IMPUTATIONS,   control = rbmi::control_bayes(     warmup = BURN_IN,     thin = BURN_BETWEEN     )   )  # Perform ANCOVA Analysis on Each Imputed Dataset ana_obj_ancova <- analyse_mi_data(   data = ADMI,   vars = vars,   method = method,   fun = ancova,  # Apply ANCOVA   delta = NULL   # No sensitivity analysis adjustment )  pool_obj_ancova <- pool(ana_obj_ancova) tidy_df <- tidy_pool_obj(pool_obj_ancova)  # Print tidy data frames print(tidy_df) #> # A tibble: 6 × 10 #>   parameter       description visit parameter_type lsm_type     est    se    lci #>   <chr>           <chr>       <chr> <chr>          <chr>      <dbl> <dbl>  <dbl> #> 1 trt_Week 24     Treatment … Week… trt            NA       -2.17   0.182 -2.53  #> 2 lsm_ref_Week 24 Least Squa… Week… lsm            ref       0.0782 0.131 -0.179 #> 3 lsm_alt_Week 24 Least Squa… Week… lsm            alt      -2.09   0.126 -2.34  #> 4 trt_Week 48     Treatment … Week… trt            NA       -3.81   0.256 -4.31  #> 5 lsm_ref_Week 48 Least Squa… Week… lsm            ref       0.0481 0.185 -0.316 #> 6 lsm_alt_Week 48 Least Squa… Week… lsm            alt      -3.76   0.176 -4.11  #> # ℹ 2 more variables: uci <dbl>, pval <dbl>"},{"path":[]},{"path":"https://openpharma.github.io/rbmiUtils/news/index.html","id":"rbmiutils-014","dir":"Changelog","previous_headings":"","what":"rbmiUtils 0.1.4","title":"rbmiUtils 0.1.4","text":"First release Preparation CRAN submission. Initial draft package. Added NEWS.md file track changes package. Added documentation via pkgdown.","code":""}]
